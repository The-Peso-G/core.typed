(ns gen-changelog
  (:require [clojure.java.shell :refer [sh]]
            [clojure.string :as str])
  (:import (java.io File)))

; fetch all tags
(sh "git" "fetch" "git@github.com:clojure/core.typed.git" "master" "--tags")

; [-> '[MajorLong MinorLong PatchLong]]
(defn git-version []
  (let [gv (-> (sh "git" "--version")
               :out
               str/trim-newline)
        prefix "git version "
        _ (assert (.startsWith gv prefix))
        version (subs gv (count prefix))
        [major minor patch & more :as match] (mapv #(Long/parseLong %) (str/split version #"\."))
        _ (assert (not more))]
    match))


(let [[major minor _] (git-version)]
  (assert (and (<= 2 major)
               (<= 25 minor))
          "Must have git version 2.25.0 or higher"))

; Str
(def changelog
  (-> (slurp "changelog.edn")
      read-string))

; (Vec Str)
(def modules
  (->> (File. "..")
       .listFiles
       (keep (fn [^File f]
               (when (and (.isDirectory f)
                          (.startsWith (.getName f) "module-"))
                 (subs (.getName f) (count "module-")))))
       sort
       vec))

; (Vec VersionStr)
; - VersionStr == "major.minor.patch"
(def tags
  (->> (sh "git" "tag" "-l")
       :out
       java.io.StringReader.
       java.io.BufferedReader.
       line-seq
       (mapcat (fn [^String s]
                 (let [version (some (fn [prefix]
                                       (when (.startsWith s prefix)
                                         (subs s (count prefix))))
                                     ; order matters here since one is a prefix of the other
                                     ["core.typed-pom-" "core.typed-"])]
                   (assert (string? version) (str "unknown tag:" s))
                   [version s])))
       (apply hash-map)))

(assert (seq tags)
        "No tags found, run `git fetch origin --tags`")

(defn parse-version-changes [[version & args :as entry]]
  (assert (vector? entry) entry)
  (let [tag-name (tags version)
        out-str (str "# " version (when-not tag-name "-SNAPSHOT") "\n\n"
                     (when tag-name
                       (let [release-date (-> (sh "git" "log" "-1" "--format=%as" tag-name)
                                              :out
                                              str/trim-newline)]
                         (str "Released: " release-date "\n\n")))
                     (apply str
                            (interpose
                              "\n"
                              (map (fn [[lib-kw & args :as all]]
                                     (assert (vector? all))
                                     (apply str "## " (name lib-kw) "\n\n"
                                            (map (fn self
                                                   ([note] (self note -1))
                                                   ([note depth]
                                                    {:pre [((some-fn string? vector?) note)]}
                                                    (if (string? note)
                                                      (str (apply str (repeat (* 2 (if (#{-1} depth) 0 depth)) " ")) "- " note "\n")
                                                      (apply str (mapv #(self % (inc depth)) note)))))
                                                 args)))
                                   args))))]
    out-str))

(defn forge-master-changelog [changelog]
  (apply str "<!--- Do not edit, generated by `changelog/changelog.edn` -->\n"
         (map parse-version-changes changelog)))

(defn spit-master-changelog []
  (spit "../CHANGELOG.md"
        (forge-master-changelog changelog)))

(comment
  (spit-master-changelog)
  )
